#[allow(dead_code)]
const EXAMPLE:&str = "A Y
B X
C Z";

#[allow(dead_code)]
const INPUT:&str = "C Y
C Y
C Y
B Z
C Y
C Z
C Y
C Y
C Z
B Y
C Y
C Y
C Y
C Y
C Y
B Z
A X
C Y
B Y
A X
C Z
C Y
C Y
C Y
B Z
B X
C Y
A X
A X
A X
C X
A X
C X
B X
C Y
C Y
A X
A Y
C Y
C Y
C Y
C Y
B X
A X
B Y
C Y
C Y
C Z
A Y
B X
B Z
C Z
C Z
A X
A X
B X
C Z
C X
A Y
C X
C Y
A X
A X
A X
C Y
C Z
C X
C Y
A X
C Y
C Z
C Y
B Z
C Y
A X
C Z
C Y
C Y
C Y
A X
A X
A X
B X
A Z
A X
C Y
A Y
C Y
B X
B Z
B Z
B Z
B X
C X
A X
A X
A X
C Z
A Y
C X
C Y
B X
C Y
C Y
A X
C Y
C Y
C Y
A X
C Y
A X
C Y
A X
C Y
B X
C Z
C Y
A X
C Z
B Z
A Z
B Z
C Y
B X
A X
C Y
B X
A X
A X
A Y
B Z
C Y
A X
C Y
C Y
A X
C Y
C Y
A X
C Y
A X
C X
B Y
C Z
B Z
C Y
C Y
A X
B X
A X
C Y
C Y
A X
B X
C Y
B X
C Z
B Z
C Y
C Y
C X
A X
C Y
A X
C Y
C Y
C Y
C Z
A X
C Y
A X
A X
B X
C Y
C Y
A X
B X
A X
A X
A X
B Z
C Y
C Y
C Y
A X
A X
A Y
A X
B X
B Z
B Z
C Y
B Z
A X
B Z
C Y
C Y
C Y
C Y
C Y
A X
A X
A Z
B Y
C Y
C Y
C Y
A X
B X
A X
A X
C X
C Y
B Z
C Y
C Y
B X
A X
A X
B Z
C Y
B Z
C Y
C Y
C Y
A X
C Y
C Y
A X
C Z
B X
B Z
C Y
C X
C Y
A X
C Z
B Z
A X
B X
C X
A X
C Y
C Y
B Z
A Z
B X
B X
A X
A X
A X
C Y
C Y
C Z
A X
C X
C Y
C Y
A X
B X
A Z
B X
B X
C Y
B X
B Y
B Z
A X
B X
B Y
C X
A Y
A Y
C Y
A X
C Y
B X
C Z
C X
A Z
C Z
C Y
C Y
B X
B X
C Y
A X
C Z
C X
C Z
B X
A X
A X
A X
B Z
B X
B Z
C Y
C Y
C Y
B X
C Z
C Y
A X
C Y
C Y
A X
A X
C Y
C Y
C Y
C Y
C Y
C Y
A X
C Y
C Y
C Y
C Y
C Z
C Y
A X
A X
C Y
A Y
B Z
C X
C Y
B X
A Y
C Y
C Y
C Y
A Y
B X
A X
B Y
C Y
C Y
C Z
B Z
C Y
A X
A Y
C Y
C Y
C Y
C Y
A Y
B Z
A X
C Y
C X
C Y
C Y
C Y
C Z
C Y
C Y
C Y
B Y
C Y
B Z
C Y
A X
C Y
B Z
C Y
C Y
A X
A X
B Z
C Y
C Y
C X
B X
C Z
A X
A X
B X
C Y
B Y
C Y
A Y
C X
A X
C X
C Y
C Y
B X
C Y
C Y
B Z
C Z
C Y
C Y
A X
C Y
C Y
A X
C Y
B X
C Y
C X
A X
C X
A X
C Y
A X
C Y
C Y
C Y
C Z
C Z
B Z
C Z
C Y
B X
C Z
C Y
A X
A X
C Y
C Y
C Y
B X
C X
A X
C Y
A X
C Y
A X
C X
B X
A X
C Y
C Y
B X
A X
A X
C Z
C X
A X
A X
B X
A Z
A X
C X
C Y
A X
B X
C Y
A X
C Y
C Y
B X
C Y
C Y
A X
C Z
C Y
B X
C X
B X
C Y
C Y
B X
B Z
B Z
C Y
C Y
B X
C Y
B Z
C X
A Z
A X
A X
C Y
C Y
C Y
C Y
C Y
C Y
B Z
B X
C Y
B Z
C Y
A X
A X
C Y
A X
A X
C Y
C Y
A Z
C Y
A X
C Y
C Y
C Y
C Y
C Y
A X
B Z
A X
C X
B X
C Y
B Z
C Y
B X
B X
C Y
C Y
C X
C Y
C Y
A X
C X
A X
C Y
B X
A X
B Y
A X
B X
C Y
C X
C Y
C Y
A X
C Y
C Y
A X
C Z
B X
A X
C Y
A X
A X
C Y
A X
C X
B X
A X
A X
B X
A X
C X
A Z
B Z
C Y
C Y
A X
C Y
C Y
B X
A X
C Y
A Y
B X
C Y
C Y
A X
C X
C Y
C Y
A X
C X
B Y
C Y
C X
C Y
C Y
C Y
C Z
A X
C Y
C X
C Y
A Z
A X
C Y
B X
C Y
B Z
A X
C Y
C Y
A X
A X
C Y
B X
A Z
B Z
C Y
C Z
A X
A X
A X
B Z
A Z
C Y
C Y
C Y
C Y
C Y
B Z
B X
A Y
B X
C Y
A X
C X
A X
A X
C Y
A X
C Y
C Y
A X
C Y
C Y
C Y
C Y
B Z
B X
C Y
C Y
A X
C Y
B X
C Y
C Z
C Y
B X
C Y
C Y
B Z
A Y
C Z
B X
C Z
C Y
A Y
A X
A X
C Y
B X
A X
A Y
C X
A Y
C Y
C Y
C X
C Y
C Z
C X
B X
C Y
C Z
A X
C Y
A X
C Y
C Y
A Z
A X
C Z
B X
C X
B X
B Y
C Y
C Y
B Z
C Y
B X
B Z
C Y
C Y
C Y
B X
B Z
C Y
B Z
B X
A Z
A X
C Y
C Y
B X
B Z
A X
C Y
C Y
C Z
C Y
C Y
C Y
B Z
C Y
C Y
B Z
C Y
C Y
C Y
C Y
C Y
C Z
C X
C Y
C Y
C Z
C Y
B Z
C Z
A X
C Y
B X
C Y
A X
C Y
A X
C Y
C Y
C Y
C Y
B X
C Y
C Y
A X
C Z
A X
A X
C Y
B X
C Y
C Y
C Y
A X
A X
C Y
B X
B X
C Y
B X
C Y
C Z
C Z
A X
C Y
C X
C X
C Z
C X
C Y
A X
C Y
C Y
C Y
A X
A X
C X
C Y
C Y
A X
A Z
C Z
C Y
C Z
A X
C Z
C Y
C Y
A X
C Y
B Z
B X
A X
C Y
C Z
A X
C X
C Y
C Y
B X
C Y
C Y
C Y
B X
B Z
B Z
A X
A X
C Z
C Y
C Y
C Y
B Z
A X
C Y
C Y
C Z
B X
A X
C Y
B Z
C Y
A X
B Z
A X
A X
A X
A Y
C Z
A X
A X
B X
A X
C Y
C Y
A X
C Z
A X
A X
C Y
A X
B X
A X
C Y
A X
C Y
C Z
C Y
C Y
C Z
C Y
C X
A Y
A Z
B Z
B X
C Y
C X
B X
A X
A Y
A X
A X
C Y
B X
A X
C Y
B Z
C Y
C Y
C Y
C Y
A X
B X
C Y
A X
A Y
C Y
B X
C Y
B Y
C Y
B X
C Y
C Y
C Y
C X
A X
B Z
C Y
C Y
B X
C Y
C Y
B Z
A X
C Y
C Y
A Y
C Y
B Z
C Y
C Y
A X
A X
A X
C Z
B X
C X
A X
C Y
C Z
A X
B X
A X
B X
C Z
C X
C Y
B X
C Z
C Z
C Y
A X
C Y
C X
B X
C Y
C Y
A Y
C Y
C Z
C Y
C Y
B Z
C Y
C Y
C Z
B X
B X
C Y
B Z
C Y
A X
C Z
C Z
A X
A X
A X
A X
C Y
C Y
B X
C Y
B X
A X
C Y
C Y
C Y
A X
B Z
A X
C Y
C Y
C Y
A X
C Y
C Y
B Z
B Z
A X
C Y
C Y
B Y
C Y
C Z
A X
C Y
C Z
A X
A X
C X
C Y
A X
A X
C Y
C Y
A X
A X
A X
C Y
C Y
B Z
C Y
B X
A X
A X
C Z
C Y
A X
C Y
A X
C Y
C Z
C Z
C Y
A X
C Y
C X
C Y
B X
C Y
A X
B Z
C Z
C Z
C Y
B X
C Y
C Y
C Y
A X
A X
A X
C Y
B Z
A X
C Y
C Y
C Y
A X
C Y
C Y
A X
C Y
C X
A X
C Y
C Y
C Z
C Z
C Y
C Y
C Y
C Y
C Z
B X
C Y
C Y
A Y
C Z
B Z
C Y
C Y
A X
B X
A X
C Z
C Y
B Y
C Y
A Z
C Y
B Z
B Z
C Y
A X
C Y
B Z
B X
B Z
A X
B X
A X
C X
A X
B X
A Y
B Z
C Z
C Y
A X
A X
C Y
C X
A Y
C Z
C Y
C Y
A X
A Z
A Y
C Y
B X
A X
C Y
C Z
B X
A X
B X
C Y
C Z
B X
C Y
C Y
C Y
A X
C Y
C Y
C Y
C Y
C Y
C X
C X
C Y
C Y
C Y
A Y
C Y
A X
C Z
C Z
C Y
C Y
C Y
B X
A Z
C Y
C Z
C Y
A X
C Y
A Y
A X
C Y
C Y
A Z
B X
C Z
B X
C Y
C Z
C Y
C Y
C Y
C Y
C Y
C Y
B Z
C Z
A X
A Z
C Z
B Y
B Z
C Z
C Z
A X
B X
B X
C Y
C Y
A X
A X
C Y
C Y
A X
C Y
A Z
C Z
C Y
A X
C Y
C Y
A X
A X
C Y
C Y
B Z
B X
C Y
C Y
A Z
C X
C Y
B X
C Z
A X
C Z
C Y
A X
B Z
C Y
C Y
B X
A Z
C Y
B Z
A X
C Y
C X
A X
C Y
C Y
C Z
A X
B X
B Z
C X
C Y
C Y
A X
C Y
B X
A X
A X
C Y
A X
A X
A X
A Y
A Z
A X
A X
C Y
C X
C Z
C Y
C Y
C X
C Y
A X
A X
A Y
C Z
C Z
C X
B Z
C Y
A X
C Y
B Z
A X
C Z
C Y
A Y
A X
B Z
A X
C Y
B X
B Z
A X
B X
B X
C Y
C X
C Y
C Y
C Y
C Z
B Z
C Y
C Y
C Z
C Y
C Y
C Y
A X
A X
C Z
A X
C Y
C Y
B Z
A X
A Z
C Z
C Y
C Y
C Y
C Z
C Y
C Y
C Y
C Y
B Z
C Y
C Z
C Z
C Y
B Z
A X
C Y
B X
C X
A X
A X
B X
C Y
C Y
C Y
C X
B Z
C Y
A X
C Z
A X
A Z
C Z
C Y
C Y
C Y
C X
A X
C Y
A Y
C Y
B Z
A Y
C Y
A X
C Y
A X
C Y
C Y
C Y
B X
C Y
C Y
A X
C Y
C Y
C Y
C Y
A X
B Z
B X
A X
C Y
C X
C Y
B X
C X
C Y
C Y
A X
A X
C Y
C Z
A X
C Y
A X
C Y
C X
C Y
B Y
A Y
C Y
C Z
A X
B X
C Y
B X
A X
C Y
B X
A Z
C Y
B X
C Y
A X
B X
C Z
A X
B X
C Y
A X
A X
B X
C Y
A X
C Z
A X
C Y
A X
B X
C Y
C Y
C Y
C Y
C Y
A X
A Z
C Y
A X
C Y
C Y
B X
C Y
A X
C Y
C Z
C Y
C Y
A X
A X
A X
C Y
C Y
C Y
C Z
C Y
C Y
C Y
C Y
C Z
C X
C Y
C Z
C Y
C Y
C Y
C Y
A X
B X
C Z
A X
C Z
C Y
C Y
C Y
C Y
A Z
B X
A X
B Z
C Y
C Y
C X
C Y
B Y
B X
C X
C X
A X
C Y
C Y
A X
A X
B Z
C Y
C Y
C Y
A X
A X
C Y
C X
C Y
A X
C X
B Y
C X
C Y
C Y
A X
B Z
C Y
B X
A X
B Y
C Y
C Y
C Y
A X
A X
C Y
C Y
A X
C Y
C X
C Y
B Z
C Y
C Y
A Z
C Y
C Z
C Z
C X
C Y
C Y
C Y
C Y
C Y
C Y
C Y
A X
C Y
B X
C Z
C Y
C X
C X
A Y
C Y
A X
A X
B Z
C Y
C Y
A X
A Z
B X
C Y
C Y
B Y
C Y
C Y
C Y
C Y
A X
C Z
C Y
C Z
A Y
C Y
A X
A X
C Y
C Y
C Y
B X
B X
B Z
A X
C Z
C X
A X
C Y
C Y
C Y
C Y
C X
C X
B Z
A Z
C Y
B Z
C Z
A X
C Z
A X
C Y
A X
C Y
A X
A X
C Y
A X
C Y
C Y
C Y
B X
C Y
C X
C Y
C Z
C Y
A X
C Y
C Y
C Y
B Z
C Y
A X
B X
C Y
C Y
B Y
C Z
C Z
C Y
A X
C Y
C Y
A X
C X
B X
A X
A X
C Y
C Y
C Y
C Y
C Y
A X
A X
C Y
C Y
B X
C Y
C Y
C X
C Y
C Z
B Z
C Z
C Y
B X
C Y
C X
A X
C Y
B X
B X
A X
C Y
A X
C Y
A X
C X
C Y
C Y
B X
C Y
C Y
C Y
C Y
C X
B Z
A X
A X
C X
C X
C Y
A X
C Z
C Y
C Z
A X
A X
C X
C X
C Z
B X
A X
C Y
B X
C Y
B X
C Y
C Y
C Y
C Y
C Y
C Y
C Y
B Z
C Z
A Z
B X
C Z
C Z
C Y
B Z
C Y
A X
C Y
C Y
C Y
B Z
C Y
A X
B Z
B Z
C Z
A Y
C Z
A X
C Y
C Z
C X
A X
B X
C Y
C Y
C Y
A X
A Y
C Y
C Y
C Y
A X
C Y
B X
A X
A X
B X
C Z
C Y
B Z
C Y
A Y
B X
C Z
B Z
B Z
C X
B Z
C X
A X
C Y
B X
C Y
A X
C Y
A X
C Y
C Y
C Z
C Y
A X
B X
C Y
A X
B X
C Y
C X
C Y
C Y
A X
C Y
A X
B X
C Y
B X
B X
C Y
A X
C X
C X
B X
B Z
C Y
B X
C Y
C Y
B X
A X
C Z
A Y
C Y
C Z
A X
A X
C Y
A X
B Z
A X
A X
C Y
B Z
B Z
C Y
B X
B X
A X
A X
C Y
C Z
C X
C Y
A X
B Y
A X
C Y
B Z
B X
A Y
A X
C Y
A X
A X
C Y
C Y
C Y
C Z
C Z
A X
B Z
A Z
A X
C Y
B Z
C X
C Y
C Z
C Z
B X
B Z
B X
C Y
B X
B X
C Y
C Y
C X
B X
A X
C Z
A X
C Y
A X
A X
C Y
B X
B X
A X
B X
B Y
C Y
A X
A X
A X
B X
C Y
B Z
C Z
B X
C Y
C Z
A X
C Y
C Y
B Z
C Z
C Y
C Z
A X
B X
A Z
C Z
B Z
A X
A X
B X
A X
C Y
C Y
C Y
C Y
A X
C Y
C Z
C Z
B X
A X
A X
B X
B X
B X
C Y
C Y
A X
C Y
B Z
C Y
C Y
B Z
A Z
C X
C Z
B X
C Y
A X
A X
C Y
C Y
C Y
C Z
A X
C X
B X
C Y
A X
C Y
C X
A X
A Z
C X
C Z
A X
C Y
C Y
C Y
A X
A X
A X
B Z
C Z
C Z
A X
B X
B X
A X
C Y
B X
C Z
B Y
A X
C Z
A Z
C Y
C Y
A X
A X
B X
C Y
B Z
C Y
A X
A X
A X
C Y
A X
C Y
C Y
C Y
B X
A X
B Z
C Y
A X
A X
A Z
A X
A Y
A X
C Y
C Y
B X
A Y
C Y
C Y
A X
A Y
C Y
B X
C Y
C Y
C Y
C Y
C Y
B X
C Y
C Y
C X
C Y
A X
B Z
B X
B X
C Y
A X
C Y
C X
C X
C Y
C Y
C Z
C Y
A X
C Y
A X
C Y
A X
A X
C Y
C Y
B X
B Y
C Y
A X
B Z
C Y
C Y
C Y
A X
A X
A X
C Z
C Y
C Z
C Y
C Y
C Y
A X
C Y
C Y
C Y
B X
A X
C Y
C Y
C Z
A X
A X
C Y
C Y
B X
A Z
C Y
C Y
C Y
C Z
C Y
A Y
C Y
C Y
C Y
B Z
C Y
B X
C Y
C Y
B Z
A X
C X
C Y
A Y
A X
C X
C Y
C Y
A Y
B X
A X
A Y
C Y
C Y
C Y
A X
A X
A X
B X
A X
C Y
C Y
C Z
C Y
C Y
C Y
C Y
C Y
C Z
C Y
B Z
A X
B X
A X
C Y
A X
C Z
B X
B X
B Z
C Y
C Y
C Z
C Y
C Z
B Z
C Z
A X
C Y
B Z
B Z
C Y
A Y
B Z
B Y
C Z
C Y
C Y
B X
A X
C Y
B Y
A X
A X
C Y
C X
C Y
B Z
A X
C Y
A X
C Z
C Y
B Z
C Y
B Y
A X
C Y
A X
B X
A Y
C Y
C Y
B X
C Y
C Z
A X
C Y
B X
C Y
B Z
C Y
B X
B Z
C X
C Y
C Z
C Y
C Y
C Y
C Y
C Y
C Y
A X
A X
A X
A X
A X
A X
C Y
A X
B Z
B X
C Y
C Y
C Y
C X
A X
C X
A X
C Y
B X
B X
C Z
C Y
C Y
A Y
C Y
C X
A X
B Z
C Y
C Z
A X
B Z
B Z
A X
A X
C Z
C Y
B Z
A X
B X
A Y
B Z
A X
C Z
C X
C Y
C X
C Y
C Y
A X
C Y
C Y
C Z
A X
B Z
C Y
C Z
A Y
C Y
C Y
A Z
C Y
C Y
C Z
C Y
C Y
C Z
C Z
C Y
A Y
B X
B Z
A Y
A X
B X
C Y
C Y
C Y
A X
C Y
A X
B X
C Y
C Y
B X
C Y
A X
A Z
B Z
B Z
A X
A Y
A X
A X
C Y
C Z
A X
B X
C Y
B X
C Y
C Z
B X
C Y
C Z
A X
C Y
C Y
C Y
B X
C Z
A X
A X
C Y
C X
A X
C Y
C Y
C Z
A X
B X
A X
C Y
C Y
C Y
C Y
B X
B Z
C Z
A X
A X
A X
A X
A X
A X
C Y
C Y
C Y
B Z
C Z
C Y
C Y
C Y
C Z
A X
C Y
B X
A X
A X
C Z
B X
C Z
B Z
C Y
A X
A X
C Y
C Y
C Y
C Y
C Y
A X
C Y
A X
C Y
A X
C Y
C Y
C Y
C Y
A X
A X
C Y
C Y
C Y
B X
A X
C Y
C Y
C X
A X
A X
C X
C Y
C Y
C Y
C Y
C Y
C Y
C Y
C Y
C X
C Y
B X
B Z
C Z
C Y
C Y
C Y
C Y
B X
C Y
C Y
C Y
C Y
B Z
A X
C Y
A X
C Y
A X
C Y
C Y
A X
C Y
C Y
A X
A Z
A X
C Z
C Z
C Y
B X
C X
C Y
C Y
C Y
B Z
B Y
A X
B Z
A X
A X
A X
B X
B X
A X
C Y
C Z
A X
C Y
C Y
C Y
A X
C Y
C Y
C Y
A X
A Y
A X
C Y
C Y
C Z
C Y
C Y
C X
A X
C Y
A X
A X
A X
C Y
C Y
C X
A X
A X
B Z
A X
C Y
A X
B Z
C Z
A X
C Y
A X
B X
C Y
C Z
A X
A X
C Y
A X
A X
C Z
B X
A X
A X
B X
C Y
B X
C Y
A X
B X
C Y
C Y
A X
B X
C Y
C Y
B X
A X
B X
A Y
C Y
C Y
C Y
A X
C Y
A X
B Z
B X
C Y
B Z
A X
C Z
C X
C Y
C Y
A X
A X
A X
C Y
A X
B Z
B Z
C Y
B X
C X
C X
B X
C Y
C Y
C Y
C Y
B Z
C Y
C Y
C Y
A X
C Y
A Y
B X
C Y
C Y
B X
A X
B Z
C Z
A X
C Y
C Y
C Z
C Y
C Y
C Y
C Y
B Y
C Z
C Y
C X
A X
A Z
C Y
A X
A Y
B X
C X
B X
B X
B X
C X
C Y
C Y
C Y
A Z
A X
C Y
C X
A Y
A X";

pub fn find_score_shape(shape: char) -> i32 {
    match shape {
        'A' => 1,
        'B' => 2,
        'C' => 3,
        _ => 0,
    }
}

pub fn find_loose(shape: char) -> char {
    match shape {
        'A' => 'C',
        'B' => 'A',
        _ => 'B',
    }
}

pub fn find_win(shape: char) -> char {
    match shape {
        'A' => 'B',
        'B' => 'C',
        _ => 'A',
    }
}

// A for Rock, B for Paper, and C for Scissors
// X for Rock, Y for Paper, and Z for Scissors

pub fn find_score_winner(shape: &str) -> i32 {
    match shape {
        "C A"=> 6,
        "A B"=> 6,
        "B C"=> 6,
        "A A"=> 3,
        "B B"=> 3,
        "C C"=> 3,
        _ => 0,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn splitvec(s: &str, separator: char) -> Vec<&str> {
        s.split(separator).collect::<Vec<&str>>()
    }

    fn score(pair: &str) -> i32 {
        let play:&str = &choose_play(pair)[..];
        find_score_shape(play.chars().nth(2).unwrap()) + find_score_winner(play)
    }

    fn total_score(strategy: &str) -> i32 {
        let split = splitvec(strategy, '\n');
        split.into_iter().map(|pair| score(pair)).sum()
    }

    fn choose_play(pair: &str) -> String {
        let mut chars = pair.chars();
        match chars.nth(2).unwrap() {
            'Y' => {
                let elf_play = pair.chars().nth(0).unwrap();
                format!("{} {}", elf_play, elf_play)
            },
            'X' => {
                let elf_play = pair.chars().nth(0).unwrap();
                format!("{} {}", elf_play, find_loose(elf_play))
            },
            'Z' => {
                let elf_play = pair.chars().nth(0).unwrap();
                format!("{} {}", elf_play, find_win(elf_play))
            },
            _ => "".to_string(),
        }
    }

    #[test]
    fn test_splitvec() {
        let split = splitvec(EXAMPLE, '\n');
        assert_eq!(split[0], "A Y");
    }

    #[test]
    fn test_choose_play() {
        assert_eq!(choose_play("A Y"), "A A");
        assert_eq!(choose_play("B X"), "B A");
        assert_eq!(choose_play("C Z"), "C A");
    }

    #[test]
    fn test_score() {
        assert_eq!(score("A Y"), 4);
        assert_eq!(score("B X"), 1);
        assert_eq!(score("C Z"), 7);
    }

    #[test]
    fn test_total_score() {
        assert_eq!(total_score(EXAMPLE), 12);
        assert_eq!(total_score(INPUT), 12111);
    }
}
